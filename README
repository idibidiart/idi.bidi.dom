/*! idi.bidi.dom 
* 
* v0.2
*
* Non-Hierarchical Interface To The DOM 
*
* Copyright (c) Marc Fawzi 2012
* 
* http://javacrypt.wordpress.com
*
* Apache License 2.0 
* 
* derived from NattyJS v0.08: a BSD licensed precursor by the same author 
*
*/

 * idi.bidi.dom - Anti-Templating Framework For Javascript -- offering a radically 
 * new way for interfacing to The DOM. In abstract terms, idi.bidi.dom takes the DOM 
 * and adds variables, variable memoization, encapsulation, multiple-inheritance and 
 * type polymorphism (with the Node Prototype as the user defined type) In logical 
 * terms, idi.bidi.dom offers a list-wise API without losing the ability to build and 
 * directly access predetermined nested structures.
 *
 * Why to use it?
 * 
 * idi.bidi.dom reduces HTML on a page to a minimum and places a simple and consistent
 * JSON API between presentation logic and the DOM
 * 
 * How does it work?
 * 
 * idi.bidi.dom allows the DOM to be decomposed into Node Lists each having a 
 * Node Prototype from which instances (copies, usually with different data) can 
 * be created, populated with JSON data and then inserted into the Node (in append, 
 * prepend, and replace modes, with the ability to target specific, previously 
 * inserted instances of the Node Prototype or the Node List's entire content, i.e. 
 * the set of instances of the Node Prototype) and where the Node itself can be 
 * dynamically linked into other Nodes.
 * 
 * Additionally, idi.bidi.dom allows the cloning of each Node and the populated
 * instances of the Node Prototype within it (including any Linked Nodes inserted 
 * into the Node Prototype and the populated instances of the Node Prototype within
 * those Linked Nodes) This means that we may re-use the same Node to create any number 
 * of differently populated and customized Nodes, thus reducing the amount of HTML 
 * in our pages while greatly simplifying our interaction with the DOM by using
 * a list-oriented DOM API instead of the much more complex/error-prone hierarchical 
 * API that the DOM exposes.
 *
 * Unlike other template-less DOM rendering frameworks, idi.bidi.dom does not attempt 
 * to take the place of Javascript itself nor does it add its own boilerplate; it 
 * simply gives Javascript more power by leveraging a simple and consistent interface
 * to the DOM. 
 *
 
 
With diagram and code

http://idibidiart.github.com/idi.bidi.dom/
